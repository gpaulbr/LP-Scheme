/*
 * generated by Xtext 2.12.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getProgramAccess().getExpressionsAssignment()); }
			(rule__Program__ExpressionsAssignment)
			{ after(grammarAccess.getProgramAccess().getExpressionsAssignment()); }
		)
		(
			{ before(grammarAccess.getProgramAccess().getExpressionsAssignment()); }
			(rule__Program__ExpressionsAssignment)*
			{ after(grammarAccess.getProgramAccess().getExpressionsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtom
entryRuleAtom
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomAccess().getAlternatives()); }
		(rule__Atom__Alternatives)
		{ after(grammarAccess.getAtomAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleList
entryRuleList
:
{ before(grammarAccess.getListRule()); }
	 ruleList
{ after(grammarAccess.getListRule()); } 
	 EOF 
;

// Rule List
ruleList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListAccess().getGroup()); }
		(rule__List__Group__0)
		{ after(grammarAccess.getListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getAtomParserRuleCall_0()); }
		ruleAtom
		{ after(grammarAccess.getExpressionAccess().getAtomParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getListParserRuleCall_1()); }
		ruleList
		{ after(grammarAccess.getExpressionAccess().getListParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getNameAssignment_0()); }
		(rule__Atom__NameAssignment_0)
		{ after(grammarAccess.getAtomAccess().getNameAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getIvalueAssignment_1()); }
		(rule__Atom__IvalueAssignment_1)
		{ after(grammarAccess.getAtomAccess().getIvalueAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getBvalueAssignment_2()); }
		(rule__Atom__BvalueAssignment_2)
		{ after(grammarAccess.getAtomAccess().getBvalueAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getDvalueAssignment_3()); }
		(rule__Atom__DvalueAssignment_3)
		{ after(grammarAccess.getAtomAccess().getDvalueAssignment_3()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getSvalueAssignment_4()); }
		(rule__Atom__SvalueAssignment_4)
		{ after(grammarAccess.getAtomAccess().getSvalueAssignment_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__0__Impl
	rule__List__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getListAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__1__Impl
	rule__List__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getCalleAssignment_1()); }
	(rule__List__CalleAssignment_1)
	{ after(grammarAccess.getListAccess().getCalleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__2__Impl
	rule__List__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getParamsAssignment_2()); }
	(rule__List__ParamsAssignment_2)*
	{ after(grammarAccess.getListAccess().getParamsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getListAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__ExpressionsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getExpressionsExpressionParserRuleCall_0()); }
		ruleExpression
		{ after(grammarAccess.getProgramAccess().getExpressionsExpressionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAtomAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__IvalueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getIvalueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getAtomAccess().getIvalueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__BvalueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getBvalueBOOLEANTerminalRuleCall_2_0()); }
		RULE_BOOLEAN
		{ after(grammarAccess.getAtomAccess().getBvalueBOOLEANTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__DvalueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getDvalueDOUBLETerminalRuleCall_3_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getAtomAccess().getDvalueDOUBLETerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__SvalueAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getSvalueSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getAtomAccess().getSvalueSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__CalleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getCalleIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getListAccess().getCalleIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__ParamsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getParamsExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getListAccess().getParamsExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_BOOLEAN : ('#t'|'#f');

RULE_ID : ('^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'!')*|'-'|'+'|'='|'<');

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
