/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.Atom
import org.xtext.example.mydsl.myDsl.List
import org.xtext.example.mydsl.myDsl.Program

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile('Schemer.java', resource.start);
	}

	def start(Resource r) '''
		// Generated By Schemer
		package pucrs.lp.schemer;
		
		public class SchemerRunApp
		{
		public static void main(String[] args) throws Exception {
			«FOR p : r.allContents.toIterable.filter(Program)»
			« FOR e : p.expressions »
			«e.compile»
			«ENDFOR» 
			«ENDFOR» 
		
		}
		}
	'''

	def dispatch compile(Atom at) ''' 
		System.out.print(«at.ivalue»);
		
	'''

	def dispatch compile(List li) '''
		«li.calle»(
		«FOR p : li.params»
			«p.compile»,
		«ENDFOR» 
		
		);
	'''
}
