/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Program");
		private final Assignment cExpressionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_0 = (RuleCall)cExpressionsAssignment.eContents().get(0);
		
		//Program:
		//	expressions+=Expression+;
		@Override public ParserRule getRule() { return rule; }
		
		//expressions+=Expression+
		public Assignment getExpressionsAssignment() { return cExpressionsAssignment; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_0() { return cExpressionsExpressionParserRuleCall_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression:
		//	Atom | List;
		@Override public ParserRule getRule() { return rule; }
		
		//Atom | List
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Atom
		public RuleCall getAtomParserRuleCall_0() { return cAtomParserRuleCall_0; }
		
		//List
		public RuleCall getListParserRuleCall_1() { return cListParserRuleCall_1; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cIvalueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIvalueINTTerminalRuleCall_1_0 = (RuleCall)cIvalueAssignment_1.eContents().get(0);
		private final Assignment cBvalueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cBvalueBOOLEANTerminalRuleCall_2_0 = (RuleCall)cBvalueAssignment_2.eContents().get(0);
		private final Assignment cDvalueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cDvalueDOUBLETerminalRuleCall_3_0 = (RuleCall)cDvalueAssignment_3.eContents().get(0);
		private final Assignment cSvalueAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cSvalueSTRINGTerminalRuleCall_4_0 = (RuleCall)cSvalueAssignment_4.eContents().get(0);
		
		//Atom:
		//	name=ID | ivalue=INT | bvalue=BOOLEAN | dvalue=DOUBLE | svalue=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID | ivalue=INT | bvalue=BOOLEAN | dvalue=DOUBLE | svalue=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//ivalue=INT
		public Assignment getIvalueAssignment_1() { return cIvalueAssignment_1; }
		
		//INT
		public RuleCall getIvalueINTTerminalRuleCall_1_0() { return cIvalueINTTerminalRuleCall_1_0; }
		
		//bvalue=BOOLEAN
		public Assignment getBvalueAssignment_2() { return cBvalueAssignment_2; }
		
		//BOOLEAN
		public RuleCall getBvalueBOOLEANTerminalRuleCall_2_0() { return cBvalueBOOLEANTerminalRuleCall_2_0; }
		
		//dvalue=DOUBLE
		public Assignment getDvalueAssignment_3() { return cDvalueAssignment_3; }
		
		//DOUBLE
		public RuleCall getDvalueDOUBLETerminalRuleCall_3_0() { return cDvalueDOUBLETerminalRuleCall_3_0; }
		
		//svalue=STRING
		public Assignment getSvalueAssignment_4() { return cSvalueAssignment_4; }
		
		//STRING
		public RuleCall getSvalueSTRINGTerminalRuleCall_4_0() { return cSvalueSTRINGTerminalRuleCall_4_0; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCalleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCalleIDTerminalRuleCall_1_0 = (RuleCall)cCalleAssignment_1.eContents().get(0);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsExpressionParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//List:
		//	'(' calle=ID params+=Expression* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' calle=ID params+=Expression* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//calle=ID
		public Assignment getCalleAssignment_1() { return cCalleAssignment_1; }
		
		//ID
		public RuleCall getCalleIDTerminalRuleCall_1_0() { return cCalleIDTerminalRuleCall_1_0; }
		
		//params+=Expression*
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_2_0() { return cParamsExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private final ProgramElements pProgram;
	private final ExpressionElements pExpression;
	private final AtomElements pAtom;
	private final ListElements pList;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pExpression = new ExpressionElements();
		this.pAtom = new AtomElements();
		this.pList = new ListElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DOUBLE");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BOOLEAN");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	expressions+=Expression+;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Expression:
	//	Atom | List;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Atom:
	//	name=ID | ivalue=INT | bvalue=BOOLEAN | dvalue=DOUBLE | svalue=STRING;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//List:
	//	'(' calle=ID params+=Expression* ')';
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//terminal DOUBLE:
	//	INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal BOOLEAN:
	//	'#t' | '#f';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//@ Override terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '!')* | '-' | '+' | '=' | '<';
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
