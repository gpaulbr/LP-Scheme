/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.scheme.Program
import org.xtext.example.mydsl.scheme.Atom
import org.xtext.example.mydsl.scheme.List
import org.xtext.example.mydsl.scheme.Expression
import java.util.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SchemeGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile('Schemer.java', resource.start);
	}

	def start(Resource r) '''
		// Generated By Schemer
		package pucrs.lp.schemer;
		
		public class SchemerRunApp
		{
			
			public static somaArray(ArrayList soma){
				int somaTotal;
				for(int i = 0; i < soma.size(); i++){
							somaTotal += soma.get(i);
						}
				return somaTotal;
				}
				
			public static subArray(ArrayList sub){
				int subTotal;
				for(int i = 0; i < sub.size(); i++){
					subTotal -= sub.get(i);
				}
				return subTotal;
			}
			
			
			«FOR d : r.allContents.toIterable.filter(Atom)»
					«IF (d.name == "define")»
						«d.definition»
					«ENDIF»
			«ENDFOR»
				        
			
			
			public static void main(String[] args) throws Exception {
			«FOR p : r.allContents.toIterable.filter(Program)»
					« FOR e : p.expressions »
						«e.compile»
					«ENDFOR»
				«ENDFOR»
			
			}
		}
		'''

	def dispatch definition(Atom at)'''
		private static void «at.name»(){
			
		}
	
	'''

	def dispatch compile(Atom at) '''
			«IF (at.ivalue != 0)»
				int num = «at.ivalue» ;
				System.out.println(num);
			«ENDIF»
						'''
	
	def dispatch compile(List li) '''
			«IF (li.calle == "+")»
			ArrayList<int> soma = new Arraylist()<>;
				«FOR p : li.params.filter(Atom)»
					«IF p.ivalue != 0»
						soma.add(«p.ivalue»);
					«ENDIF»
					
					«IF p.dvalue != 0.0»
						soma.add(«p.dvalue»);
					«ENDIF»
				«ENDFOR»
				System.out.println(somaArray(soma));	
			«ENDIF»
			«IF (li.calle == "-")»
					ArrayList<int> sub = new Arraylist()<>;
						«FOR p : li.params.filter(Atom)»
							«IF p.ivalue != 0»
								sub.add(«p.ivalue»);
							«ENDIF»
							«IF p.dvalue != 0.0»
								sub.add(«p.dvalue»);
							«ENDIF»
						«ENDFOR»
						System.out.println(subArray(sub));	
					«ENDIF»
			'''
}
